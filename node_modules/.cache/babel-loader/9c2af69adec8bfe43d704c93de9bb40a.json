{"ast":null,"code":"/**\n * Shreeshail Pokharel @02931612\n * Given a Boggle board and a dictionary, returns a list of available words in\n * the dictionary present inside of the Boggle board.\n * @param {string[][]} grid - The Boggle game board.\n * @param {string[]} dictionary - The list of available words.\n * @returns {string[]} solutions - Possible solutions to the Boggle board.\n * of characters) | Set 1\" (2020)\n * Credit to Demeteria Mack, Shane Oliver, Javid Mitchell, Manish Basnet\n */\nfunction findAllSolutions(grid, dictionary) {\n  let solutions = [];\n  convertCase(grid, dictionary);\n  let trie = CreateTrie(dictionary);\n\n  if (grid == null || dictionary == null) {\n    return solutions;\n  }\n\n  let grid_len = grid.length;\n\n  if (grid_len === 0) {\n    return solutions;\n  }\n\n  for (let i = 0; i < grid_len; i++) {\n    if (grid[i].length !== grid_len) {\n      return solutions;\n    }\n  }\n\n  let result = new Set();\n\n  for (let y = 0; y < grid_len; y++) {\n    for (let x = 0; x < grid_len; x++) {\n      let word = \"\";\n      let checked = new Array(grid_len).fill(false).map(() => new Array(grid_len).fill(false));\n      find(word, x, y, grid, checked, trie, result);\n    }\n  }\n\n  solutions = Array.from(result);\n  return solutions;\n}\n\n;\n\nfunction TrieNode(value) {\n  this.value = value;\n  this.children = new Array();\n  this.isValidWord = false;\n}\n\n_c = TrieNode;\n\nfunction CreateTrie(dict) {\n  var root = new TrieNode(\"\");\n\n  if (dict.length === 0) {\n    return;\n  }\n\n  for (let words of dict) {\n    var node = root;\n\n    for (let i = 0; i < words.length; i++) {\n      var letter = words[i];\n      var ord = letter.charCodeAt(0) - 97;\n      var currentNode = node.children[ord];\n\n      if (node.children[ord] === undefined) {\n        currentNode = new TrieNode(letter);\n        node.children[ord] = currentNode;\n      }\n\n      node = currentNode;\n    }\n\n    node.isValidWord = true;\n  }\n\n  return root;\n}\n\n_c2 = CreateTrie;\n\nfunction find(word, x, y, grid, checked, trie, result) {\n  let directions = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [-1, 1], [1, -1], [-1, -1]];\n\n  if (y < 0 || x < 0 || y >= grid.length || x >= grid.length || checked[x][y] === true) {\n    return;\n  }\n\n  word += grid[x][y];\n\n  if (checkPrefix(word, trie)) {\n    checked[x][y] = true;\n\n    if (isValidWord(word, trie)) {\n      if (word.length > 2) {\n        result.add(word);\n      }\n    }\n\n    for (let i = 0; i < 8; i++) {\n      find(word, x + directions[i][0], y + directions[i][1], grid, checked, trie, result);\n    }\n  }\n\n  checked[x][y] = false;\n}\n\nfunction checkPrefix(word, trie) {\n  let tword = \"\";\n  let currentNode = trie;\n\n  for (let i = 0; i < word.length; i++) {\n    if (currentNode != undefined) {\n      for (let node of currentNode.children) {\n        if (node != undefined && node.value === word[i]) {\n          tword += word[i];\n          currentNode = node;\n          break;\n        }\n      }\n    }\n  }\n\n  if (word == tword) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isValidWord(word, trie) {\n  let tword = \"\";\n  let currentNode = trie;\n\n  for (let i = 0; i < word.length; i++) {\n    if (currentNode != undefined) {\n      for (let node of currentNode.children) {\n        if (node != undefined && node.value == word[i]) {\n          tword += word[i];\n          currentNode = node;\n          break;\n        }\n      }\n    }\n  }\n\n  if (word == tword && currentNode.isValidWord == true) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction convertCase(grid, dict) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j]) {\n        grid[i][j] = grid[i][j].toLowerCase();\n      }\n    }\n  }\n\n  for (let j = 0; j < dict.length; j++) {\n    dict[j] = dict[j].toLowerCase();\n  }\n}\n\nvar grid = [[\"t\", \"w\", \"y\", \"r\"], [\"e\", \"n\", \"p\", \"h\"], [\"g\", \"z\", \"qu\", \"r\"], [\"st\", \"n\", \"t\", \"a\"]];\nvar dictionary = [\"art\", \"ego\", \"gent\", \"get\", \"net\", \"new\", \"newt\", \"prat\", \"pry\", \"qua\", \"quart\", \"quartz\", \"rat\", \"tar\", \"tarp\", \"ten\", \"went\", \"wet\", \"arty\", \"egg\", \"not\", \"quar\"]; // console.log(exports.findAllSolutions(grid, dictionary));\n\nexport default findAllSolutions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TrieNode\");\n$RefreshReg$(_c2, \"CreateTrie\");","map":{"version":3,"sources":["/Users/shailpokharel/Desktop/SWEAssn-5-main/src/boggle_solver.js"],"names":["findAllSolutions","grid","dictionary","solutions","convertCase","trie","CreateTrie","grid_len","length","i","result","Set","y","x","word","checked","Array","fill","map","find","from","TrieNode","value","children","isValidWord","dict","root","words","node","letter","ord","charCodeAt","currentNode","undefined","directions","checkPrefix","add","tword","j","toLowerCase"],"mappings":"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","sourcesContent":["/**\n * Shreeshail Pokharel @02931612\n * Given a Boggle board and a dictionary, returns a list of available words in\n * the dictionary present inside of the Boggle board.\n * @param {string[][]} grid - The Boggle game board.\n * @param {string[]} dictionary - The list of available words.\n * @returns {string[]} solutions - Possible solutions to the Boggle board.\n * of characters) | Set 1\" (2020)\n * Credit to Demeteria Mack, Shane Oliver, Javid Mitchell, Manish Basnet\n */\n\nfunction findAllSolutions (grid, dictionary) {\n\tlet solutions = [];\n\n\tconvertCase(grid,dictionary);\n\tlet trie = CreateTrie(dictionary);\n\n\tif(grid == null || dictionary == null){\n\t\treturn solutions;\n\t}\n\n\tlet grid_len = grid.length;\n  \n\tif(grid_len===0){\n\t\treturn solutions;\n\t}\n  \n\tfor(let i=0; i<grid_len;i++){\n\t\tif(grid[i].length!== grid_len ){\n\t\t\treturn solutions;\n\t\t}\n\t}\n\n\tlet result= new Set();\n\tfor(let y= 0; y<grid_len ; y++){\n\t\tfor(let x= 0; x<grid_len ; x++){\n\n\t\t\tlet word= \"\";\n\t\t\tlet checked = new Array(grid_len).fill(false).map(() => new Array(grid_len).fill(false));\n\t\t\tfind(word,x,y,grid,checked,trie,result);\n\t\t}\n\t}\n\n\tsolutions= Array.from(result);\n\treturn solutions;\n};\n\nfunction TrieNode(value) {\n\tthis.value=value;\n\tthis.children = new Array();\n\tthis.isValidWord = false;\n}\n\nfunction CreateTrie(dict) {\n\tvar root = new TrieNode(\"\");\n\n\tif(dict.length===0){\n\t\treturn;\n\t}\n\n\tfor(let words of dict){\n\t\tvar node = root;\n\t\tfor(let  i =0;i<words.length;i++){\n\t\t\tvar letter = words[i];\n\t\t\tvar ord  = letter.charCodeAt(0) - 97;\n\t\t\tvar currentNode = node.children[ord];\n\t\t\tif(node.children[ord]=== undefined){\n\t\t\t\tcurrentNode = new TrieNode(letter);\n\t\t\t\tnode.children[ord]=currentNode;\n\t\t\t}\n\t\t\tnode=currentNode;\n\t\t}\n\t\tnode.isValidWord=true;\n\t}\n\treturn root;\n}\n\nfunction find(word,x,y,grid,checked,trie,result){\n\tlet directions=[[0,1],[1,0],[0,-1],[-1,0],[1,1],[-1,1],[1,-1],[-1,-1]];\n\n\tif(y<0 || x<0 || y>=grid.length || x >=grid.length || checked[x][y]===true){\n\t\treturn;\n\t}\n\n\tword +=  grid[x][y];\n\tif(checkPrefix(word,trie)){\n\t\tchecked[x][y]=true;\n\t\tif (isValidWord(word,trie)){\n\n\t\t\tif(word.length>2){\n\t\t\t\tresult.add(word);\n\t\t\t}\n\t\t}\n\n\t\tfor(let i=0;i<8;i++){\n\t\t\tfind(word,x+directions[i][0],y+directions[i][1],grid,checked,trie,result);\n\t\t}\n\t}\n\tchecked[x][y]=false;\n}\n\nfunction checkPrefix(word,trie){\n\tlet tword=\"\"; \n\tlet currentNode=trie;\n\n\tfor(let i =0;i<word.length;i++){\n\t\tif(currentNode!=undefined){\n\t\t\tfor(let node of currentNode.children){\n\t\t\t\tif(node!=undefined && node.value===word[i]){\n\t\t\t\t\ttword+=word[i];\n\t\t\t\t\tcurrentNode=node;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(word==tword){\n\t\treturn true;\n\t}\n\treturn false;\n\n}\n\nfunction isValidWord(word,trie){\n\tlet tword=\"\";\n\tlet currentNode=trie;\n\tfor(let i =0;i<word.length;i++){\n\t\tif(currentNode!=undefined){\n\t\t\tfor(let node of currentNode.children){\n\t\t\t\tif(node!=undefined && node.value==word[i]){\n\t\t\t\t\ttword+=word[i];\n\t\t\t\t\tcurrentNode=node;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(word==tword && currentNode.isValidWord==true){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction convertCase(grid,dict){\n\tfor(let i=0;i<grid.length;i++){\n\t\tfor(let j=0;j<grid.length;j++){\n\t\t\tif(grid[i][j]){\n\t\t\t\tgrid[i][j]= grid[i][j].toLowerCase();\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(let j=0;j<dict.length;j++){\n\t\tdict[j]=dict[j].toLowerCase();\n\t}\n}\n\nvar grid = [  [\"t\", \"w\", \"y\", \"r\"],\n\t[\"e\", \"n\", \"p\", \"h\"],\n\t[\"g\", \"z\", \"qu\",\"r\"],\n\t[\"st\", \"n\", \"t\", \"a\"]];\nvar dictionary = [\"art\", \"ego\", \"gent\", \"get\", \"net\", \"new\", \"newt\", \"prat\",\n\t\"pry\", \"qua\", \"quart\", \"quartz\", \"rat\", \"tar\", \"tarp\",\n\t\"ten\", \"went\", \"wet\", \"arty\", \"egg\", \"not\", \"quar\"];\n// console.log(exports.findAllSolutions(grid, dictionary));\n\nexport default findAllSolutions;\n\n"]},"metadata":{},"sourceType":"module"}